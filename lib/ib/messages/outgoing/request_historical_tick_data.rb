module IB
  module Messages
    module Outgoing
      extend Messages # def_message macros

      # client.reqTickByTickData(19001, ContractSamples.USStockAtSmart(), "Last", 0, false);

      # client.reqHistoricalTicks(
      #   18001,
      #   ContractSamples.USStockAtSmart(),
      #   "20220808 10:00:00 US/Eastern",
      #   null,
      #   10,
      #   "TRADES",
      #   1,
      #   true,
      #   null
      # );
      #
      #
      # requestId, id of the request
      # contract, Contract object that is subject of query.
      # startDateTime, i.e. "20170701 12:01:00". Uses TWS timezone specified at login.
      # endDateTime, i.e. "20170701 13:01:00". In TWS timezone. Exactly one of startDateTime or endDateTime must be defined.
      # numberOfTicks, Number of distinct data points. Max is 1000 per request.
      # whatToShow, (Bid_Ask, Midpoint, or Trades) Type of data requested.
      # useRth, Data from regular trading hours (1), or all available hours (0).
      # ignoreSize, Omit updates that reflect only changes in size, and not price. Applicable to Bid_Ask data requests.
      # miscOptions Should be defined as null; reserved for internal use.
      RequestHistoricalTickData = def_message(
        [0, 96],
        :request_id,   # autogenerated if not specified
        [:contract, :serialize_supershort],
        :start_date,
        :end_date,
        :number_of_ticks,
        :tick_type,
        :use_rth,
        :ignore_size,
        :misc_options
      )


#       class RequestMarketDepth
#         def encode
#           ## create a proper request_id  and erase :id and :ticker_id if nessesary
#           if self.class.properties?.include?(:request_id)
#             @data[:request_id] = @data[:id] || @data[:ticker_id] || @data[:request_id] || rand(9999)
#             @data[:id] = @data[:ticker_id] = nil
#           end

#           [
#             self.class.message_id,
#             self.class.version,
#             @data[:request_id],
#             contract.con_id,
#             contract.symbol,
#             contract[:sec_type],
#             contract.last_trade_date_or_contract_month,
#             contract.strike,
#             contract.right == :none ? '' : contract.right,
#             contract.multiplier,
#             contract.exchange,
#             contract.primary_exchange,
#             contract.currency,
#             contract.local_symbol,
#             contract.trading_class,
#             @data[:num_rows],
#             @data[:is_smart_depth],
#             "",
#             ""
#           ]
#         end
#       end
    end
  end
end
